# -*- coding: utf-8 -*-
"""memory_faiss

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gFDCGakSwGCV5T4FVi5Brkc5abylZCaM
"""

from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS
import datetime
import os

class SemanticMemory:
    def __init__(self, path="memory/faiss_memory"):
        os.makedirs("memory", exist_ok=True)
        self.embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
        self.path = path
        if os.path.exists(path):
            self.db = FAISS.load_local(path, self.embeddings)
        else:
            self.db = FAISS.from_texts([], self.embeddings)

    def add_message(self, role, content):
        timestamp = datetime.datetime.now().isoformat()
        metadata = {"role": role, "timestamp": timestamp}
        self.db.add_texts([content], metadatas=[metadata])
        self.db.save_local(self.path)

    def retrieve_relevant(self, query, k=3):
        if not self.db.index.ntotal:
            return []
        docs = self.db.similarity_search(query, k=k)
        return [d.page_content for d in docs]
